/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
public:
int pickIndexInMountainArray(MountainArray &mountainArr,int l,int r){
    while(l<r){
        int mid=l+(r-l)/2;
        if(mountainArr.get(mid)<mountainArr.get(mid+1))
        {
            l=mid+1;
        }
        else{
            r=mid;
        }
    }
    return l;
}
int binarySearch(MountainArray &mountainArr,int l,int r,int target)
{
  while(l<=r)
  {
      int mid=l+(r-l)/2;
      if(mountainArr.get(mid)==target)
        return mid;
      else if(mountainArr.get(mid)>target)
        r=mid-1;
      else
      l=mid+1;
        
  }
  return -1;
}

int reverseBinarySearch(MountainArray &mountainArr,int l,int r,int target){
    while(l<=r)
    {
        int mid=l+(r-l)/2;
        if(mountainArr.get(mid)==target)
          return mid;
        else if(mountainArr.get(mid)>target)
           l=mid+1;
        else
          r=mid-1;        
    }
    return -1;
}
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int n=mountainArr.length();
        int peakIndex = pickIndexInMountainArray(mountainArr,0,n-1);
        int idx=binarySearch(mountainArr,0,peakIndex,target);
        if(idx==-1)
          {
              return reverseBinarySearch(mountainArr,peakIndex, n-1,target);
          }
          return idx;
    }
};
