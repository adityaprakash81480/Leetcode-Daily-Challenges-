class Solution {
public:
    int findPivot(vector<int>& nums) {
        int mid;
        int l = 0, r = nums.size()-1;
        while(l < r) {
            //eliminating duplicates from left side
            while(l < nums.size()-1 && nums[l] == nums[l+1])
                l++;
            //eliminating duplicates from right side
            while(r > 0 && nums[r] == nums[r-1])
                r--;
            
            mid = l + (r-l)/2;
            if(nums[mid] < nums[r])
                r = mid;
            else
                l = mid+1;
        }
        return r;
    }
    bool b_search(vector<int>& nums, int l, int r, int target) {
        while(l <= r) {
            int mid = l + (r-l)/2;
            if(nums[mid] == target)
                return true;
            if(nums[mid] < target)
                l = mid+1;
            else
                r = mid-1;
        }
        return false;
    }
    bool search(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return false;
        int pivot = findPivot(nums);
        
        if(b_search(nums, 0, pivot-1, target))
            return true;
        
        return b_search(nums, pivot, nums.size()-1, target);
    }
};
